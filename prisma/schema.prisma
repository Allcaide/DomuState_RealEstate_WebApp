// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// filepath: /c:/Users/luisa/Documents/Projetos Programações Máximas/Real Estate App/api/prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  name      String?
  email     String @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  posts     Post[]
  renovations Renovation[]
  savedPosts SavedPost[]
}


model Post {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  title     String
  description String?
  price     Int
  images    String[]
  address   String
  city      String
  bedroom   Int
  bathroom  Int
  latitude  String
  longitude String
  area      Int
  createdAt DateTime @default(now())

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postDetail  PostDetail?
  renovations Renovation[]
  savedPosts  SavedPost[]
}

model PostDetail {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  postId    String @unique @db.ObjectId
  utilities String?
  pet       String?
  income    String?
  school    Int?
  bus       Int?
  restaurant Int?

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model SavedPost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Renovation {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  postId      String @db.ObjectId
  contractorId String @db.ObjectId
  estimatedCost Int
  description String?
  status      String
  createdAt   DateTime @default(now())

  post       Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  contractor User @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  images     RenovationImage[]
}

model RenovationImage {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  renovationId String @db.ObjectId
  imageUrl     String
  type         String

  renovation Renovation @relation(fields: [renovationId], references: [id], onDelete: Cascade)
}

model ImageUpload {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  urls      String[]
  createdAt DateTime @default(now())
}
